#include "random.h"
#include <iostream>
#include "algorithm.h"
#include "maze.h"

DFSMazeGenerator::DFSMazeGenerator(Maze* maze)
    : MazeGenerator(maze)
{
    rows = maze->nrow();
    cols = maze->ncol();

    currentRoom = maze->getStart();
    currentRoom->mark();
    savedRooms.push(currentRoom);

    finished = false, deadEnd = false;
}

bool DFSMazeGenerator::isFinished()
{
    return finished;
}

void DFSMazeGenerator::step()
{
    if(deadEnd) {
        currentRoom = savedRooms.top();
        savedRooms.pop();
        deadEnd = false;
    }

    int r = currentRoom->row(), c = currentRoom->col(), size, i;

    Direction randomDirections[] = {Direction::North, Direction::South, Direction::East, Direction::West};
    std::random_shuffle(std::begin(randomDirections), std::end(randomDirections));
    Room *secondRoom;
    Room::AdjDoorIterator door;

    for(Direction d :randomDirections) {
        switch(d) {
            case Direction::South :
                if(r+1 >= rows)
                    break;

                door = currentRoom->adjDoors().begin();
                size = currentRoom->adjDoors().end() - door;

                for(i = 0; i < size; i++) {
                    if((*door)->oppositeRoom(currentRoom)->row() == r+1)
                        break;
                    door++;
                }

                secondRoom = (*door)->oppositeRoom(currentRoom);
                if(!(*door)->isClosed())
                    break;

                if(secondRoom->isMarked())
                    break;

                secondRoom->mark();
                (*door)->open();
                currentRoom->addAdjRoom(d, secondRoom);

                savedRooms.push(currentRoom);
                currentRoom = secondRoom;

                return;
                break;

            case Direction::North :
                if(r-1 < 0)
                    break;

                door = currentRoom->adjDoors().begin();
                size = currentRoom->adjDoors().end() - door;

                for(i = 0; i < size; i++) {
                    if((*door)->oppositeRoom(currentRoom)->row() == r-1)
                        break;
                    door++;
                }

                secondRoom = (*door)->oppositeRoom(currentRoom);
                if(!(*door)->isClosed())
                    break;

                if(secondRoom->isMarked())
                    break;

                secondRoom->mark();
                (*door)->open();
                currentRoom->addAdjRoom(d, secondRoom);

                savedRooms.push(currentRoom);
                currentRoom = secondRoom;

                return;
                break;

            case Direction::West :
                if(c-1 < 0)
                    break;

                door = currentRoom->adjDoors().begin();
                size = currentRoom->adjDoors().end() - door;

                for(i = 0; i < size; i++) {
                    if((*door)->oppositeRoom(currentRoom)->col() == c-1)
                        break;
                    door++;
                }

                secondRoom = (*door)->oppositeRoom(currentRoom);
                if(!(*door)->isClosed())
                    break;

                if(secondRoom->isMarked())
                    break;

                secondRoom->mark();
                (*door)->open();
                currentRoom->addAdjRoom(d, secondRoom);

                savedRooms.push(currentRoom);
                currentRoom = secondRoom;

                return;
                break;

            case Direction::East :
                if(c+1 >= cols)
                    break;

                door = currentRoom->adjDoors().begin();
                size = currentRoom->adjDoors().end() - door;

                for(i = 0; i < size; i++) {
                    if((*door)->oppositeRoom(currentRoom)->col() == c+1)
                        break;
                    door++;
                }

                secondRoom = (*door)->oppositeRoom(currentRoom);
                if(!(*door)->isClosed())
                    break;

                if(secondRoom->isMarked())
                    break;

                secondRoom->mark();
                (*door)->open();
                currentRoom->addAdjRoom(d, secondRoom);

                savedRooms.push(currentRoom);
                currentRoom = secondRoom;

                return;
                break;

            default:
                break;
        }
    }

    if(savedRooms.empty()) {
        finished = true;
        return;
    }
    deadEnd = true;
}

KruskallMazeGenerator::KruskallMazeGenerator(Maze* maze)
    : MazeGenerator(maze)
{
}

bool KruskallMazeGenerator::isFinished()
{
    return true;
}

void KruskallMazeGenerator::step()
{
}

Direction DFSProgram::move(LockedRoom currentRoom, std::vector<AdjLockedRoom> adjRooms, const Position& target)
{
    if(adjRooms.size() == 0)
        return Direction::Stop;

    for(int i = 0; i < adjRooms.size(); i++) {
        AdjLockedRoom alr = adjRooms[i];
        if(alr.isMarked()) {
            break;
        }

        currentRoom.unMark();
        return alr.direction();
    }

    return adjRooms[0].direction();
}

Direction CustomProgram::move(LockedRoom currentRoom, std::vector<AdjLockedRoom> adjRooms, const Position& target)
{
    return Direction::Stop;
}

Direction RandomProgram::move(LockedRoom currentRoom, std::vector<AdjLockedRoom> adjRooms, const Position& target)
{
    if (target == currentRoom.position() || adjRooms.size() == 0)
        return Direction::Stop;

    currentRoom.mark();
    auto direction = adjRooms[pick_an_integer<size_t>(0, adjRooms.size()-1)].direction();
    return direction;
}

OpenAllMazeGenerator::OpenAllMazeGenerator(Maze *maze)
    : MazeGenerator(maze), nextDoorIt_(maze->doors().begin())
{ }

bool OpenAllMazeGenerator::isFinished()
{
    return nextDoorIt_ == maze_->doors().end();
}

void OpenAllMazeGenerator::step()
{
    (*nextDoorIt_)->open();
    ++nextDoorIt_;
}
